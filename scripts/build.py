#!/usr/bin/env python3
"""
–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ MkDocs
"""

import os
import json
import shutil
import hashlib
from datetime import datetime
from pathlib import Path
import yaml

class CustomBuilder:
    def __init__(self, config_path="mkdocs.yml"):
        self.config_path = config_path
        self.config = self.load_config()
        self.build_dir = Path("dist")
        self.docs_dir = Path("docs")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MkDocs"""
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def create_build_info(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ"""
        build_info = {
            "build_date": datetime.utcnow().isoformat(),
            "build_timestamp": int(datetime.utcnow().timestamp()),
            "site_name": self.config.get('site_name', ''),
            "site_url": self.config.get('site_url', ''),
            "python_version": os.popen('python --version').read().strip(),
            "git_commit": self.get_git_commit(),
            "git_branch": self.get_git_branch()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        build_info_path = self.build_dir / "build-info.json"
        with open(build_info_path, 'w', encoding='utf-8') as f:
            json.dump(build_info, f, indent=2, ensure_ascii=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JS –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        js_content = f"const BUILD_INFO = {json.dumps(build_info, ensure_ascii=False)};"
        js_path = self.build_dir / "assets" / "javascripts" / "build-info.js"
        js_path.parent.mkdir(parents=True, exist_ok=True)
        with open(js_path, 'w', encoding='utf-8') as f:
            f.write(js_content)
            
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    def get_git_commit(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ Git"""
        try:
            return os.popen('git rev-parse --short HEAD').read().strip()
        except:
            return "unknown"
    
    def get_git_branch(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ Git"""
        try:
            return os.popen('git rev-parse --abbrev-ref HEAD').read().strip()
        except:
            return "unknown"
    
    def optimize_assets(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        assets_dir = self.build_dir / "assets"
        
        if not assets_dir.exists():
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ö–µ—à–∞–º–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        for file_path in assets_dir.rglob('*'):
            if file_path.is_file() and file_path.suffix in ['.css', '.js']:
                self.add_asset_hash(file_path)
    
    def add_asset_hash(self, file_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(file_path, 'rb') as f:
            content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
        file_hash = hashlib.md5(content).hexdigest()[:8]
        
        # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º
        new_name = f"{file_path.stem}.{file_hash}{file_path.suffix}"
        new_path = file_path.parent / new_name
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        shutil.copy2(file_path, new_path)
        
        print(f"‚úÖ –•–µ—à –¥–æ–±–∞–≤–ª–µ–Ω: {file_path.name} -> {new_name}")
    
    def create_sitemap(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ä—Ç—ã —Å–∞–π—Ç–∞"""
        sitemap_path = self.build_dir / "sitemap.xml"
        
        urls = []
        for file_path in self.build_dir.rglob('*.html'):
            if file_path.name != '404.html':
                relative_path = file_path.relative_to(self.build_dir)
                urls.append(f"https://aasemikov.github.io/my-static-site/{relative_path}")
        
        sitemap_content = """<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
"""
        for url in urls:
            sitemap_content += f"""  <url>
    <loc>{url}</loc>
    <lastmod>{datetime.utcnow().strftime('%Y-%m-%d')}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
"""
        sitemap_content += "</urlset>"
        
        with open(sitemap_path, 'w', encoding='utf-8') as f:
            f.write(sitemap_content)
        
        print("‚úÖ –ö–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
    
    def create_robots_txt(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ robots.txt"""
        robots_path = self.build_dir / "robots.txt"
        
        robots_content = """User-agent: *
Allow: /

Sitemap: https://aasemikov.github.io/my-static-site/sitemap.xml
"""
        with open(robots_path, 'w', encoding='utf-8') as f:
            f.write(robots_content)
        
        print("‚úÖ robots.txt —Å–æ–∑–¥–∞–Ω")
    
    def validate_build(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞"""
        required_files = [
            self.build_dir / "index.html",
            self.build_dir / "assets" / "javascripts" / "build-info.js",
            self.build_dir / "sitemap.xml",
            self.build_dir / "robots.txt"
        ]
        
        for file_path in required_files:
            if not file_path.exists():
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                return False
        
        print("‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    
    def build(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–±–æ—Ä–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
        self.build_dir.mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–±–æ—Ä–∫—É MkDocs
        print("üì¶ –ó–∞–ø—É—Å–∫ MkDocs build...")
        os.system("mkdocs build --site-dir dist --strict")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å–±–æ—Ä–∫–∏
        self.create_build_info()
        self.optimize_assets()
        self.create_sitemap()
        self.create_robots_txt()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if self.validate_build():
            print("üéâ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    builder = CustomBuilder()
    builder.build()

if __name__ == "__main__":
    main()
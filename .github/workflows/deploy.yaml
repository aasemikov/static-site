name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0' 

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
          venv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt', '**/scripts/*.py') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install html5validator markdown-link-check pyyaml
        
    - name: Validate Python scripts
      run: |
        python -m py_compile scripts/build.py
        python -m py_compile scripts/optimize.py
        echo "‚úÖ Python scripts validated"
        
    - name: Validate Markdown links
      run: |
        find docs -name "*.md" -exec markdown-link-check -c .github/markdown-link-check-config.json {} \;
        
    - name: Validate HTML templates
      run: |
        html5validator --root overrides/ --ignore "*.min.css,*.min.js"
        
    - name: Validate JavaScript
      run: |
        if [ -f docs/javascripts/custom.js ]; then
          node -c docs/javascripts/custom.js
          echo "‚úÖ JavaScript syntax is valid"
        fi

  build:
    name: Build and Optimize
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Python dependencies
        pip install -r requirements.txt
        pip install pyyaml pillow
        
        # Node.js dependencies for PostCSS
        npm install -g postcss-cli
        npm install -g autoprefixer cssnano postcss-preset-env postcss-advanced-variables
        
    - name: Process CSS with PostCSS
      run: |
        postcss docs/stylesheets/custom.css \
          --use postcss-preset-env \
          --use autoprefixer \
          --use cssnano \
          --output docs/stylesheets/custom.min.css \
          --no-map
        
    - name: Run standard MkDocs build
      run: |
        mkdocs build --strict --verbose --site-dir dist
        
    - name: Run custom build script
      run: |
        python scripts/build.py
        
    - name: Optimize images
      run: |
        python scripts/optimize.py
        
    - name: Validate output HTML
      run: |
        html5validator --root dist/ --ignore "*.min.css,*.min.js"
        
    - name: Test built site
      run: |
        cd dist
        python -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        echo "üß™ Testing site availability..."
        curl -f http://localhost:8000 || exit 1
        echo "üß™ Testing build info..."
        curl -f http://localhost:8000/build-info.json || echo "Build info not found"
        echo "üß™ Testing sitemap..."
        curl -f http://localhost:8000/sitemap.xml || echo "Sitemap not found"
        kill $SERVER_PID
        echo "‚úÖ All tests passed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: site-dist
        path: dist/
        retention-days: 7
        
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: site-dist
        path: dist
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Notify success
      if: success()
      run: |
        echo "üöÄ Site deployed successfully to ${{ steps.deployment.outputs.page_url }}"
        echo "üìä Build info: ${{ steps.deployment.outputs.page_url }}/build-info.json"
        echo "üó∫Ô∏è Sitemap: ${{ steps.deployment.outputs.page_url }}/sitemap.xml"
        
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        npm install -g lighthouse
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage --collect.url=https://aasemikov.github.io/my-static-site/ || echo "Lighthouse check completed with warnings"
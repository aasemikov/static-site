name: Frontend Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  build-frontend:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install PostCSS and tools
      run: |
        npm install -g postcss-cli@10.0.0
        npm install -g autoprefixer@10.4.14
        npm install -g cssnano@5.1.15
        npm install -g postcss-preset-env@7.8.3
        npm install -g html-minifier-terser@7.2.0
        npm install -g terser@5.28.1
        
    - name: Process CSS with PostCSS
      run: |
        # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CSS
        postcss docs/stylesheets/custom.css \
          --use postcss-preset-env \
          --use autoprefixer \
          --use cssnano \
          --output docs/stylesheets/custom.min.css \
          --no-map
        
        echo "‚úÖ CSS processed with PostCSS"
        
    - name: Minify JavaScript
      run: |
        if [ -f docs/javascripts/custom.js ]; then
          terser docs/javascripts/custom.js \
            --compress \
            --mangle \
            --output docs/javascripts/custom.min.js
          echo "‚úÖ JavaScript minified"
        fi
        
    - name: Upload frontend assets
      uses: actions/upload-artifact@v4
      with:
        name: frontend-assets
        path: |
          docs/stylesheets/
          docs/javascripts/
        retention-days: 1

  validate-html:
    name: Validate HTML
    runs-on: ubuntu-latest
    needs: build-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend assets
      uses: actions/download-artifact@v4
      with:
        name: frontend-assets
        path: docs/
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install HTML validator
      run: |
        python -m pip install --upgrade pip
        pip install html5validator
        
    - name: Validate HTML templates
      run: |
        if [ -d "overrides" ]; then
          html5validator --root overrides/ --ignore "*.min.css,*.min.js" || echo "HTML templates validation completed"
        fi
        
    - name: Validate Markdown files
      run: |
        pip install markdown
        python -c "
import markdown
from pathlib import Path
import sys

errors = []
for md_file in Path('docs').rglob('*.md'):
    try:
        with open(md_file, 'r', encoding='utf-8') as f:
            content = f.read()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Markdown –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω
        html = markdown.markdown(content)
        print(f'‚úÖ {md_file} - valid')
    except Exception as e:
        errors.append(f'‚ùå {md_file}: {e}')

if errors:
    for error in errors:
        print(error)
    sys.exit(1)
else:
    print('‚úÖ All Markdown files are valid')
        "

  build-site:
    name: Build Static Site
    runs-on: ubuntu-latest
    needs: [build-frontend, validate-html]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend assets
      uses: actions/download-artifact@v4
      with:
        name: frontend-assets
        path: docs/
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install MkDocs and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build with MkDocs
      run: |
        mkdocs build --strict --verbose --site-dir dist
        
    - name: Minify HTML output
      run: |
        npm install -g html-minifier-terser@7.2.0
        for file in $(find dist -name "*.html"); do
          html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --remove-optional-tags \
            --remove-redundant-attributes \
            --remove-script-type-attributes \
            --remove-tag-whitespace \
            --use-short-doctype \
            --minify-css true \
            --minify-js true \
            --output $file \
            $file
        done
        echo "‚úÖ HTML files minified"
        
    - name: Validate final HTML
      run: |
        pip install html5validator
        html5validator --root dist/ --ignore "*.min.css,*.min.js" --also-check-css --also-check-svg || echo "Final HTML validation completed"
        
    - name: Test built site
      run: |
        cd dist
        python -m http.server 8000 &
        SERVER_PID=$!
        sleep 3
        echo "üß™ Testing site availability..."
        STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000)
        if [ "$STATUS_CODE" -eq 200 ]; then
          echo "‚úÖ Site is accessible (HTTP $STATUS_CODE)"
        else
          echo "‚ùå Site is not accessible (HTTP $STATUS_CODE)"
          exit 1
        fi
        kill $SERVER_PID
        
    - name: Upload site artifact
      uses: actions/upload-artifact@v4
      with:
        name: built-site
        path: dist/
        retention-days: 1

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-site
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download site artifact
      uses: actions/download-artifact@v4
      with:
        name: built-site
        path: dist
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Show deployment info
      run: |
        echo "üöÄ Site deployed successfully!"
        echo "üì± URL: ${{ steps.deployment.outputs.page_url }}"
        echo "‚è∞ Deployment time: $(date -u)"